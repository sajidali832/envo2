
-- 1. Create the earning_history table
create table if not exists public.earning_history (
    id bigint generated by default as identity primary key,
    user_id uuid references public.profiles(id) on delete cascade not null,
    amount numeric not null,
    description text not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);
-- Enable RLS
alter table public.earning_history enable row level security;
-- Allow users to read their own earning history
create policy "Users can view their own earning history."
on public.earning_history for select
using (auth.uid() = user_id);


-- 2. Create the function to credit users
create or replace function public.apply_daily_credit()
returns void
language plpgsql
security definer
as $$
declare
  user_record record;
begin
  for user_record in select id from public.profiles loop
    -- Add 200 to total_earnings
    update public.profiles
    set total_earnings = total_earnings + 200
    where id = user_record.id;

    -- Insert a record into earning_history
    insert into public.earning_history(user_id, amount, description)
    values(user_record.id, 200, 'Daily Credit');
  end loop;
end;
$$;

-- 3. Grant execute permission on the function to the postgres user
grant execute on function public.apply_daily_credit() to postgres;

-- 4. Schedule the function to run daily at midnight UTC
-- The cron job runs as the 'postgres' user and can execute the function
select cron.schedule(
    'daily-credit-job',
    '0 0 * * *', -- This means at 00:00 every day (midnight UTC)
    'select public.apply_daily_credit()'
);

